% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering.R
\name{get_cluster_recommendations}
\alias{get_cluster_recommendations}
\title{Get Recommendations for Clusters}
\usage{
get_cluster_recommendations(recom_descriptions, clusters,
  category = "all", recom_table)
}
\arguments{
\item{recom_descriptions}{A vector of descriptions of recommendations, named by visits' IDs;
terms in the descriptions are separated by ", "}

\item{clusters}{An output of the function \link{cluster_visits}}

\item{category}{A vector of categories of the terms to be returned or \code{"all"}
(default: \code{"all"})}

\item{recom_table}{(necessary if \code{category != "all"}) A data frame with columns:
\describe{
  \item{\code{term}}{a term of recommendation}
  \item{\code{category}}{a category of the term}
}}
}
\value{
A list of data frames. For each cluster there is a data frame with columns:
  \item{\code{recommendation}}{A term of recommendation}
  \item{\code{count}}{A number of occurrences of the recommentadion in the cluster}
  \item{\code{frequency}}{A percentage of visits containing the reccomentation}
  Rows are sorted by the \code{frequency}.
}
\description{
Get recommendations prescribed by doctors
to patients from given clusters. The categories
of recommendation terms can be specified.
}
\examples{
inter_term_vectors <- embed_terms(interviews, embedding_size = 10L,
                                  term_count_min = 1L)
exam_term_vectors <- embed_terms(examinations, embedding_size = 10L,
                                 term_count_min = 1L)
visits_vectors <- embed_list_visits(interviews,
                                    examinations, inter_term_vectors, exam_term_vectors)
clusters <- cluster_visits(visits_vectors, visits,
                           spec = "internist",
                           cluster_number = 2L)

get_cluster_recommendations(recommendations, clusters, recom_table = terms_categories)
get_cluster_recommendations(recommendations, clusters, recom_table = terms_categories,
category = "anatomic")
get_cluster_recommendations(recommendations, clusters, recom_table = terms_categories,
category = "all")

}
